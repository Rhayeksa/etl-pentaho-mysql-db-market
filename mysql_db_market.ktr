<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>mysql_db_market</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2024/05/02 17:16:07.223</created_date>
    <modified_user>-</modified_user>
    <modified_date>2024/05/02 17:16:07.223</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>Data Customer</note>
      <xloc>288</xloc>
      <yloc>224</yloc>
      <width>99</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Data Product</note>
      <xloc>288</xloc>
      <yloc>48</yloc>
      <width>89</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Data Sales Order</note>
      <xloc>288</xloc>
      <yloc>400</yloc>
      <width>110</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>PLSQL - Module Product</note>
      <xloc>240</xloc>
      <yloc>688</yloc>
      <width>157</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>PLSQL - Module Customer</note>
      <xloc>928</xloc>
      <yloc>688</yloc>
      <width>167</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>PLSQL - Module Sales Order</note>
      <xloc>304</xloc>
      <yloc>1488</yloc>
      <width>178</width>
      <heigth>26</heigth>
      <fontname>Ubuntu</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <connection>
    <name>pentaho_conn_mysql_db_market</name>
    <server>localhost</server>
    <type>MYSQL</type>
    <access>Native</access>
    <database>pentaho_db_market</database>
    <port>3303</port>
    <username>root</username>
    <password>Encrypted 2be98afc86aa7f2e4cb79ce10cc9da0ce</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>EXTRA_OPTION_MYSQL.defaultFetchSize</code>
        <attribute>500</attribute>
      </attribute>
      <attribute>
        <code>EXTRA_OPTION_MYSQL.useCursorFetch</code>
        <attribute>true</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>3303</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>STREAM_RESULTS</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <order>
    <hop>
      <from>Data grid</from>
      <to>Add sequence</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Select values</from>
      <to>Table output</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Select values 2</from>
      <to>Table output 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Data grid 2</from>
      <to>Add sequence 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Add sequence 2</from>
      <to>Get system info 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get system info 2</from>
      <to>Select values 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Add sequence</from>
      <to>Get system info</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get system info</from>
      <to>Select values</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Data grid 4</from>
      <to>Add sequence 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Add sequence 4</from>
      <to>Get system info 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get system info 4</from>
      <to>Select values 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Select values 4</from>
      <to>Table output 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Data grid 3</from>
      <to>Add sequence 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Add sequence 3</from>
      <to>Get system info 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get system info 3</from>
      <to>Select values 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Select values 3</from>
      <to>Table output 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Table output 3</from>
      <to>Dummy (do nothing) 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Table output 2</from>
      <to>Dummy (do nothing) 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Table output</from>
      <to>Dummy (do nothing)</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Table output 4</from>
      <to>Dummy (do nothing) 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - create tables</from>
      <to>Data grid</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - create tables</from>
      <to>Data grid 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - create tables</from>
      <to>Data grid 3</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - create tables</from>
      <to>Data grid 4</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductGetAll</from>
      <to>Execute SQL script - create ProductGetAll</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductGetById</from>
      <to>Execute SQL script - create ProductGetById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductGetByName</from>
      <to>Execute SQL script - create ProductGetByName</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductGetByLikeName</from>
      <to>Execute SQL script - create ProductGetByLikeName</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductGetEmptyStock</from>
      <to>Execute SQL script - create ProductGetEmptyStock</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductAddOne</from>
      <to>Execute SQL script - create ProductAddOne</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductAddStockById</from>
      <to>Execute SQL script - create ProductAddStockById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductEditOneById</from>
      <to>Execute SQL script - create ProductEditOneById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop ProductDeleteOneById</from>
      <to>Execute SQL script - create ProductDeleteOneById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerGetAll</from>
      <to>Execute SQL script - create CustomerGetAll</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerGetById</from>
      <to>Execute SQL script - create CustomerGetById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerGetByName</from>
      <to>Execute SQL script - create CustomerGetByName</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerGetByLikeName</from>
      <to>Execute SQL script - create CustomerGetByLikeName</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerGetByGender</from>
      <to>Execute SQL script - create CustomerGetByGender</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerAddOne</from>
      <to>Execute SQL script - create CustomerAddOne</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerEditOneById</from>
      <to>Execute SQL script - create CustomerEditOneById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop CustomerDeleteOneById</from>
      <to>Execute SQL script - create CustomerDeleteOneById</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop SalesOrderGetBySalesOrderId</from>
      <to>Execute SQL script - create SalesOrderGetBySalesOrderId</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop SalesOrderAddOne</from>
      <to>Execute SQL script - create SalesOrderAddOne</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Execute SQL script - drop SalesOrderDeleteBySalesOrderId</from>
      <to>Execute SQL script - create SalesOrderDeleteBySalesOrderId</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>Add sequence</name>
    <type>Sequence</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <valuename>product_id</valuename>
    <use_database>N</use_database>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema/>
    <seqname>SEQ_</seqname>
    <use_counter>Y</use_counter>
    <counter_name/>
    <start_at>1</start_at>
    <increment_by>1</increment_by>
    <max_value>999999999</max_value>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Add sequence 2</name>
    <type>Sequence</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <valuename>customer_id</valuename>
    <use_database>N</use_database>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema/>
    <seqname>SEQ_</seqname>
    <use_counter>Y</use_counter>
    <counter_name/>
    <start_at>1</start_at>
    <increment_by>1</increment_by>
    <max_value>999999999</max_value>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Add sequence 3</name>
    <type>Sequence</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <valuename>sales_order_id</valuename>
    <use_database>N</use_database>
    <connection/>
    <schema/>
    <seqname>SEQ_</seqname>
    <use_counter>Y</use_counter>
    <counter_name/>
    <start_at>1</start_at>
    <increment_by>1</increment_by>
    <max_value>999999999</max_value>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Add sequence 4</name>
    <type>Sequence</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <valuename>sales_order_detail_id</valuename>
    <use_database>N</use_database>
    <connection/>
    <schema/>
    <seqname>SEQ_</seqname>
    <use_counter>Y</use_counter>
    <counter_name/>
    <start_at>1</start_at>
    <increment_by>1</increment_by>
    <max_value>999999999</max_value>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Data grid</name>
    <type>DataGrid</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>name</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>45</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>price</name>
        <type>Integer</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>stock</name>
        <type>Integer</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>description</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>0</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
    </fields>
    <data>
      <line>
        <item>Sabun mandi 25g</item>
        <item>3000</item>
        <item>100</item>
        <item/>
      </line>
      <line>
        <item>Odol 75g</item>
        <item>8000</item>
        <item>50</item>
        <item/>
      </line>
      <line>
        <item>Sikat Gigi</item>
        <item>5000</item>
        <item>150</item>
        <item/>
      </line>
    </data>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>288</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Data grid 2</name>
    <type>DataGrid</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>name</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>gender</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>address</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>is_member</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
    </fields>
    <data>
      <line>
        <item>Umum</item>
        <item>Pria</item>
        <item>Home</item>
        <item>0</item>
      </line>
      <line>
        <item>Jhon</item>
        <item>Pria</item>
        <item>Perum Bumi Indah Blok B1 No. 3</item>
        <item>1</item>
      </line>
      <line>
        <item>Fanny</item>
        <item>Wanita</item>
        <item>Perum Taman Teknologi AA2 No. 4</item>
        <item>1</item>
      </line>
    </data>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>288</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Data grid 3</name>
    <type>DataGrid</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>customer_id</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>grand_total_price</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
    </fields>
    <data>
      <line>
        <item>1</item>
        <item>169000</item>
      </line>
      <line>
        <item>2</item>
        <item>50000</item>
      </line>
      <line>
        <item>3</item>
        <item>130000</item>
      </line>
    </data>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>288</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Data grid 4</name>
    <type>DataGrid</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>sales_order_id</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>product_id</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>price</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>quantity</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
      <field>
        <name>total_price</name>
        <type/>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
        <field_null_if/>
      </field>
    </fields>
    <data>
      <line>
        <item>1</item>
        <item>1</item>
        <item>3000</item>
        <item>30</item>
        <item>90000</item>
      </line>
      <line>
        <item>1</item>
        <item>2</item>
        <item>8000</item>
        <item>20</item>
        <item>160000</item>
      </line>
      <line>
        <item>2</item>
        <item>3</item>
        <item>5000</item>
        <item>10</item>
        <item>50000</item>
      </line>
      <line>
        <item>3</item>
        <item>2</item>
        <item>8000</item>
        <item>10</item>
        <item>80000</item>
      </line>
      <line>
        <item>3</item>
        <item>3</item>
        <item>5000</item>
        <item>10</item>
        <item>50000</item>
      </line>
    </data>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>288</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Dummy (do nothing)</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Dummy (do nothing) 2</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Dummy (do nothing) 3</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Dummy (do nothing) 4</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>864</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerAddOne(
	IN _name VARCHAR(45)
	, IN _gender VARCHAR(6)
	, IN _address TEXT
	, IN _is_member BOOLEAN
)
proc:BEGIN
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	IF _gender NOT IN('Pria', 'Wanita') THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Gender hanya dapat diinput Pria atau Wanita' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	IF _is_member NOT IN(1, 0, TRUE, FALSE) THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'is_member hanya dapat diinput TRUE atau FALSE' AS message;
		ROLLBACK;
		LEAVE proc;		
	END IF;

	INSERT INTO pentaho_db_market.customers(name, gender, address, is_member, created_at, updated_at)
	VALUES(_name, CONCAT(UPPER(SUBSTRING(_gender,1,1)), LOWER(SUBSTRING(_gender,2))), _address, _is_member, NOW(), NOW());

	SELECT
		NOW() AS datetime
		, 201 AS code
		, 'Created' AS status
		, 'Pelanggan berhasil ditambah!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>1136</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerDeleteOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerDeleteOneById(
	IN _id INT
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND customer_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Pelanggan dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	ELSEIF @checker > 1 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Pelanggan dengan id tersebut duplikat!' AS message;
		ROLLBACK;
		LEAVE proc;	
    END IF;

	UPDATE pentaho_db_market.customers
	SET deleted_at = NOW()
	WHERE customer_id = _id;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'Pelanggan dengan id tersebut berhasil dihapus!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>1296</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerEditOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerEditOneById(
	IN _id INT
	, IN _name VARCHAR(45)
	, IN _gender VARCHAR(6)
	, IN _address TEXT
	, IN _is_member BOOLEAN
)
proc:BEGIN
	-- variabel
	DECLARE v_name VARCHAR(45);
	DECLARE v_gender VARCHAR(6);
	DECLARE v_address TEXT;
	DECLARE v_is_member BOOLEAN;

	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND customer_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Customer dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	ELSEIF @checker > 1 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Customer dengan id tersebut duplikat!' AS message;
		ROLLBACK;
		LEAVE proc;	
	END IF;

	IF _gender NOT IN('Pria', 'Wanita') THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Gender hanya dapat diinput Pria atau Wanita' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	IF _is_member NOT IN(1, 0, TRUE, FALSE) THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'is_member hanya dapat diinput TRUE atau FALSE' AS message;
		ROLLBACK;
		LEAVE proc;		
	END IF;

	SELECT name, gender, address, is_member
	INTO v_name, v_gender, v_address, v_is_member
	FROM pentaho_db_market.customers
	WHERE customer_id = _id;

	SET v_name = IFNULL(_name, v_name);
	SET v_gender = IFNULL(_gender, v_gender);
	SET v_address = IFNULL(_address, v_address);
	SET v_is_member = IFNULL(_is_member, v_is_member);

	UPDATE pentaho_db_market.customers
	SET updated_at = NOW()
		, name = v_name
		, gender = CONCAT(UPPER(SUBSTRING(v_gender,1,1)), LOWER(SUBSTRING(v_gender,2)))
		, address = v_address
		, is_member = v_is_member
	WHERE customer_id = _id;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'Pelanggan berhasil diubah!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerGetAll</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerGetAll(
	IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL;

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;

	SELECT
		customer_id
		, name
		, gender
		, address
		, IF(is_member = 1, 'Yes', 'No') AS 'member'
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	ORDER BY customer_id DESC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>736</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerGetByGender</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerGetByGender(
	IN _gender VARCHAR(6)
	, IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel	
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	DECLARE v_total_page INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	IF _gender NOT IN('Pria', 'Wanita') THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Gender hanya dapat diinput Pria atau Wanita' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND gender = _gender;

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;
   
	SELECT
		customer_id
		, name
		, gender
		, address
		, IF(is_member = 1, 'Yes', 'No') AS 'member'
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND gender = _gender
	ORDER BY name ASC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>1056</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerGetById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerGetById(
	IN _id INT
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND customer_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Customer dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;
   
   SELECT
		customer_id
		, name
		, gender
		, address
		, IF(is_member = 1, 'Yes', 'No') AS 'member'
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND customer_id = _id;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>816</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerGetByLikeName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerGetByLikeName(
	IN _name VARCHAR(45)
	, IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel	
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	DECLARE v_total_page INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND name LIKE CONCAT('%', _name , '%');

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;
   
	SELECT
		customer_id
		, name
		, gender
		, address
		, IF(is_member = 1, 'Yes', 'No') AS 'member'
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND name LIKE CONCAT('%', _name , '%')
	ORDER BY name ASC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create CustomerGetByName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.CustomerGetByName(
	IN _name VARCHAR(45)
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND name = _name;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Customer dengan nama tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
    END IF;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;
   
   SELECT
		customer_id
		, name
		, gender
		, address
		, IF(is_member = 1, 'Yes', 'No') AS 'member'
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND name = _name;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1168</xloc>
      <yloc>896</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductAddOne(
	IN _name VARCHAR(45)
	, IN _price INT
	, IN _qty INT
	, IN _description TEXT
)
proc:BEGIN
	-- variabel	
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	IF _price &lt; 1 OR _qty &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad request' AS status
			, 'Price dan Qty tidak boleh kurang dari 1!' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND name = _name;

	IF @checker > 0 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Produk dengan nama tersebut sudah ada!' AS message;
		ROLLBACK;
		LEAVE proc;
		END IF;
		
	INSERT INTO pentaho_db_market.products(name, price, stock, description, created_at, updated_at)
	VALUES(_name, _price, _qty, _description, NOW(), NOW());

	SELECT
		NOW() AS datetime
		, 201 AS code
		, 'Created' AS status
		, 'Produk berhasil ditambah!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1136</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductAddStockById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductAddStockById(
	IN _id INT
	, IN _qty INT
)
proc:BEGIN
	-- variabel
	DECLARE v_stock INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	IF _qty &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad request' AS status
			, 'Qty tidak boleh kurang dari 1!' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND product_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Produk dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
    END IF;
   
   SET v_stock = _qty + (SELECT stock FROM pentaho_db_market.products WHERE product_id = _id);
   
   UPDATE pentaho_db_market.products
   SET stock = v_stock
   	   , updated_at = NOW()
   WHERE product_id = _id;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'Stok berhasil ditambahkan!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductDeleteOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductDeleteOneById(
	IN _id INT
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND product_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Produk dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	ELSEIF @checker > 1 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Produk dengan id tersebut duplikat!' AS message;
		ROLLBACK;
		LEAVE proc;	
    END IF;

	UPDATE pentaho_db_market.products
	SET deleted_at = NOW()
	WHERE product_id = _id;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'Produk dengan id tersebut berhasil dihapus!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1376</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductEditOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductEditOneById(
	IN _id INT
	, IN _name VARCHAR(45)
	, IN _price INT
	, IN _description TEXT
)
proc:BEGIN
	-- variabel
	DECLARE v_name VARCHAR(45);
	DECLARE v_price INT;
	DECLARE v_description TEXT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	IF _price &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad request' AS status
			, 'Price tidak boleh kurang dari 1!' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND product_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Produk dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	ELSEIF @checker > 1 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Produk dengan id tersebut duplikat!' AS message;
		ROLLBACK;
		LEAVE proc;	
	END IF;

	SELECT name, price, description
	INTO v_name, v_price, v_description
	FROM pentaho_db_market.products
	WHERE product_id = _id;

	SET v_name = IFNULL(_name, v_name);
	SET v_price = IFNULL(_price, v_price);
	SET v_description = IFNULL(_description, v_description);

	UPDATE pentaho_db_market.products
	SET name = v_name
		, price = v_price
		, description = v_description
		, updated_at = NOW()
	WHERE product_id = _id
	AND deleted_at IS NOT NULL;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'Produk dengan id tersebut berhasil diubah!' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1296</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductGetAll</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductGetAll(
	IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			mysql_code = RETURNED_SQLSTATE, mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL;

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;

	SELECT
		product_id
		, name
		, price
		, stock
		, description
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	ORDER BY product_id DESC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>736</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductGetById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductGetById(
	IN _id INT
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND product_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Product dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;
   
   SELECT
		product_id
		, name
		, price
		, stock
		, description
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND product_id = _id;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>816</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductGetByLikeName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductGetByLikeName(
	IN _name VARCHAR(45)
	, IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	DECLARE v_total_page INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND name LIKE CONCAT('%', _name , '%');

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;
   
	SELECT
		product_id
		, name
		, price
		, stock
		, description
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND name LIKE CONCAT('%', _name , '%')
	ORDER BY name ASC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductGetByName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductGetByName(
	IN _name VARCHAR(45)
)
proc:BEGIN
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND name = _name;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Product dengan nama tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
    END IF;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;
   
   SELECT
		product_id
		, name
		, price
		, stock
		, description
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND name = _name;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>896</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create ProductGetEmptyStock</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.ProductGetEmptyStock(
	IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel	
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	DECLARE v_total_page INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;
	
	-- code
	START TRANSACTION;
	
	SET v_total_data = (
		SELECT COUNT(1)
		FROM pentaho_db_market.products
		WHERE deleted_at IS NULL
		AND stock &lt; 1
	);

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
    END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;

   SELECT
		product_id
		, name
		, price
		, stock
		, description
	FROM pentaho_db_market.products
	WHERE deleted_at IS NULL
	AND stock &lt; 1
	ORDER BY name ASC
	LIMIT _size
	OFFSET v_offset;

	SELECT
		_size AS page_size
		, v_total_data AS total_data
		, CEIL(v_total_data / _size) AS total_page
		, _page AS current_page;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1056</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create SalesOrderAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.SalesOrderAddOne(
	IN _customer_id INT
	, IN _product_id_qty_arr_json LONGTEXT
)
proc:BEGIN
	-- variabel
	DECLARE i INT UNSIGNED DEFAULT 0;
	DECLARE v_count INT UNSIGNED DEFAULT JSON_LENGTH(_product_id_qty_arr_json);
	DECLARE v_arr LONGTEXT DEFAULT NULL;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

 	SET @current_datetime = NOW();
	SET @grand_total_price = 0;
	SET @reduce_stock = 0;

	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.customers
	WHERE deleted_at IS NULL
	AND customer_id = _customer_id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Customer dengan id tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
	ELSEIF @checker > 1 THEN
		SELECT
			NOW() AS datetime
			, 409 AS code
			, 'Conflict' AS status
			, 'Customer dengan id tersebut duplikat!' AS message;
		ROLLBACK;
		LEAVE proc;			
	END IF;
   
	SELECT MAX(sales_order_id) + 1
	INTO @new_sales_order_id 
	FROM pentaho_db_market.sales_order;
  
 	INSERT INTO pentaho_db_market.sales_order
 	SET	sales_order_id = @new_sales_order_id
 		, customer_id = _customer_id
 		, grand_total_price = 0
 		, created_at = @current_datetime
 		, updated_at = @current_datetime;

	WHILE i &lt; v_count DO
		SET v_arr = JSON_EXTRACT(_product_id_qty_arr_json, CONCAT('$[', i, ']'));

		SELECT REPLACE(v_arr,'\\','') into v_arr;
		SELECT REPLACE(v_arr,'"{','{') into v_arr;
		SELECT REPLACE(v_arr,'}"','}') into v_arr;

		SET @product_id = JSON_EXTRACT(v_arr, '$.product_id');
		SET @qty = JSON_EXTRACT(v_arr, '$.qty');

		SELECT COUNT(1), price, stock
		INTO @checker, @price, @stock
		FROM pentaho_db_market.products
		WHERE deleted_at IS NULL
		AND product_id = @product_id
		GROUP BY price, stock;

		IF @checker &lt; 1 THEN
			SELECT
				NOW() AS datetime
				, 404 AS code
				, 'Not found' AS status
				, CONCAT('Product dengan id ', @product_id ,' tidak ditemukan!') AS message;
			ROLLBACK;
			LEAVE proc;
		ELSEIF @checker > 1 THEN
			SELECT
				NOW() AS datetime
				, 409 AS code
				, 'Conflict' AS status
				, CONCAT('Product dengan id ', @product_id ,' duplikat!') AS message;
			ROLLBACK;
			LEAVE proc;			
		END IF;
		
		SELECT COUNT(1) INTO @checker
		FROM pentaho_db_market.sales_order_detail
		WHERE deleted_at IS NULL
		AND sales_order_id = @new_sales_order_id
		AND product_id = @product_id;
	  	
		IF @checker > 0 THEN
			SELECT quantity
			INTO @quantity
			FROM pentaho_db_market.sales_order_detail
			WHERE deleted_at IS NULL
			AND sales_order_id = @new_sales_order_id
			AND product_id = @product_id;
	   	
			SET @new_quantity = @quantity + @qty;

			UPDATE pentaho_db_market.sales_order_detail
			SET quantity = @new_quantity
				, total_price = @price * @new_quantity
			WHERE deleted_at IS NULL
			AND sales_order_id = @new_sales_order_id
			AND product_id = @product_id;
		ELSE
			INSERT INTO pentaho_db_market.sales_order_detail
			SET sales_order_id = @new_sales_order_id
				, product_id = @product_id
				, price = @price
				, quantity = @qty
				, total_price = @price * @qty
				, created_at = @current_datetime
				, updated_at = @current_datetime;
		END IF;
	  
		SET @grand_total_price = @grand_total_price + (@price * @qty);
		SET i = i + 1;
	END WHILE;

	UPDATE pentaho_db_market.sales_order
 	SET grand_total_price = @grand_total_price
 	WHERE sales_order_id = @new_sales_order_id;

 	UPDATE pentaho_db_market.products
 	SET stock = @stock - @new_quantity
 	WHERE product_id = @product_id;
 	
	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>576</xloc>
      <yloc>1728</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create SalesOrderDeleteBySalesOrderId</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.SalesOrderDeleteBySalesOrderId(
	IN _id INT
)
proc:BEGIN
	-- variabel
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.sales_order
	WHERE deleted_at IS NULL
	AND sales_order_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Id customer order atau Kode order tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
    END IF;
   
	UPDATE pentaho_db_market.sales_order
	SET deleted_at = NOW()
	WHERE sales_order_id = _id;

	UPDATE pentaho_db_market.sales_order_detail
	SET deleted_at = NOW()
	WHERE sales_order_id = _id;

	SELECT
		NOW() AS datetime
		, 200 AS code
		, 'OK' AS status
		, 'OK' AS message;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>576</xloc>
      <yloc>1648</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create SalesOrderGetBySalesOrderId</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE PROCEDURE IF NOT EXISTS pentaho_db_market.SalesOrderGetBySalesOrderId(
	IN _id INT
	, IN _size INT
	, IN _page INT
)
proc:BEGIN
	-- variabel
	DECLARE v_offset INT;
	DECLARE v_total_data INT;
	-- DECLARE mysql_code CHAR(5) DEFAULT '00000';
	DECLARE mysql_msg TEXT;

	DECLARE exit handler FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1
			-- mysql_code = RETURNED_SQLSTATE;
			mysql_msg = MESSAGE_TEXT;
			SELECT
				NOW() AS datetime
				, 500 AS code
				, 'Internal Server Error' AS status
				, mysql_msg AS message;
			ROLLBACK;
			RESIGNAL;
		ROLLBACK;
	END;

	-- code
	START TRANSACTION;
	
	IF _size &lt;= 0 OR _page &lt;= 0 THEN
		SELECT
			NOW() AS datetime
			, 400 AS code
			, 'Bad Request' AS status
			, 'Size dan Page tidak boleh kurang dari 1' AS message;
		ROLLBACK;
		LEAVE proc;
	END IF;

	SELECT COUNT(1) INTO @checker
	FROM pentaho_db_market.sales_order
	WHERE deleted_at IS NULL
	AND sales_order_id = _id;

	IF @checker &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 404 AS code
			, 'Not found' AS status
			, 'Id customer order atau Kode order tersebut tidak ditemukan!' AS message;
		ROLLBACK;
		LEAVE proc;
    END IF;

	SELECT COUNT(1) INTO v_total_data
	FROM pentaho_db_market.sales_order_detail
	WHERE deleted_at IS NULL
	AND sales_order_id = _id;

	IF v_total_data &lt; 1 THEN
		SELECT
			NOW() AS datetime
			, 204 AS code
			, 'No Content' AS status
			, 'No Content' AS message;
	ELSE
		SELECT
			NOW() AS datetime
			, 200 AS code
			, 'OK' AS status
			, 'OK' AS message;		
	END IF;

	SET _size = IFNULL(_size, 10);
	SET _page = IFNULL(_page, 1);
	SET v_offset = (_page - 1) * _size;
	
	SELECT
		co.sales_order_id AS kode_order
		, c.name AS pelanggan
		, IF(c.is_member = 1, 'Yes', 'No') AS 'member'
		, p.name AS produk
		, cod.price AS harga
		, cod.quantity AS qty
		, cod.total_price
		, IFNULL(co.grand_total_price, 0) AS grand_total_harga
	FROM pentaho_db_market.sales_order co
	INNER JOIN pentaho_db_market.customers c ON c.customer_id = co.customer_id 
	LEFT JOIN pentaho_db_market.sales_order_detail cod ON cod.sales_order_id = co.sales_order_id
	INNER JOIN pentaho_db_market.products p ON p.product_id = cod.product_id 
	WHERE co.sales_order_id = _id
	ORDER BY p.name
	LIMIT _size
	OFFSET v_offset;

	IF NOT v_total_data &lt; 1 THEN
		SELECT
			_size AS page_size
			, v_total_data AS total_data
			, CEIL(v_total_data / _size) AS total_page
			, _page AS current_page;
	END IF;

	COMMIT;
END ;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>576</xloc>
      <yloc>1552</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - create tables</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP TABLE IF EXISTS pentaho_db_market.customer_order_detail;
DROP TABLE IF EXISTS pentaho_db_market.customer_order;
-- DROP TABLE IF EXISTS pentaho_db_market.customers;
-- DROP TABLE IF EXISTS pentaho_db_market.products;

CREATE TABLE IF NOT EXISTS pentaho_db_market.products(
  	product_id INT AUTO_INCREMENT UNIQUE NOT NULL
  	, name VARCHAR(45) NOT NULL UNIQUE
  	, price INT NOT NULL
  	, stock INT NOT NULL
  	, description TEXT
  	, created_at DATETIME NOT NULL
  	, updated_at DATETIME NOT NULL
  	, deleted_at DATETIME
	, PRIMARY KEY(product_id)
);

CREATE TABLE IF NOT EXISTS pentaho_db_market.customers(
	customer_id INT AUTO_INCREMENT UNIQUE NOT NULL
  	, name VARCHAR(45) NOT NULL
  	, gender VARCHAR(6) NOT NULL
  	, address TEXT NOT NULL
  	, is_member BOOLEAN
  	, created_at DATETIME NOT NULL
  	, updated_at DATETIME NOT NULL
  	, deleted_at DATETIME
  	, PRIMARY KEY(customer_id)
);

CREATE TABLE IF NOT EXISTS pentaho_db_market.sales_order(
	sales_order_id INT AUTO_INCREMENT UNIQUE NOT NULL
	, customer_id INT NOT NULL
	, grand_total_price INT NOT NULL
	, created_at DATETIME NOT NULL
	, updated_at DATETIME NOT NULL
	, deleted_at DATETIME
	, PRIMARY KEY(sales_order_id)
	, FOREIGN KEY (customer_id) REFERENCES pentaho_db_market.customers(customer_id)
);

CREATE TABLE IF NOT EXISTS pentaho_db_market.sales_order_detail(
	sales_order_detail_id INT AUTO_INCREMENT UNIQUE NOT NULL
	, sales_order_id INT NOT NULL
	, product_id INT NOT NULL
	, price INT NOT NULL
	, quantity INT NOT NULL
	, total_price INT NOT NULL
	, created_at DATETIME NOT NULL
	, updated_at DATETIME NOT NULL
	, deleted_at DATETIME
	, PRIMARY KEY(sales_order_detail_id)
	, FOREIGN KEY (sales_order_id) REFERENCES pentaho_db_market.sales_order(sales_order_id)
	, FOREIGN KEY (product_id) REFERENCES pentaho_db_market.products(product_id)
);

</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>96</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerAddOne;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>1136</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerDeleteOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerDeleteOneById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>1296</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerEditOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerEditOneById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerGetAll</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerGetAll;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>736</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerGetByGender</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerGetByGender;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>1056</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerGetById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerGetById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>816</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerGetByLikeName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerGetByLikeName;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop CustomerGetByName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.CustomerGetByName;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>896</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductAddOne;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>1136</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductAddStockById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductAddStockById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductDeleteOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductDeleteOneById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>1376</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductEditOneById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductEditOneById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>1296</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductGetAll</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductGetAll;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>736</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductGetById</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductGetById;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>816</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductGetByLikeName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductGetByLikeName;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>976</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductGetByName</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductGetByName;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>896</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop ProductGetEmptyStock</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.ProductGetEmptyStock;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>1056</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop SalesOrderAddOne</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.SalesOrderAddOne;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>176</xloc>
      <yloc>1728</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop SalesOrderDeleteBySalesOrderId</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.SalesOrderDeleteBySalesOrderId;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>192</xloc>
      <yloc>1648</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Execute SQL script - drop SalesOrderGetBySalesOrderId</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>DROP PROCEDURE IF EXISTS pentaho_db_market.SalesOrderGetBySalesOrderId;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>176</xloc>
      <yloc>1552</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Get system info</name>
    <type>SystemInfo</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>created_at</name>
        <type>system date (fixed)</type>
      </field>
      <field>
        <name>updated_at</name>
        <type>system date (fixed)</type>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>496</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Get system info 2</name>
    <type>SystemInfo</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>created_at</name>
        <type>system date (fixed)</type>
      </field>
      <field>
        <name>updated_at</name>
        <type>system date (fixed)</type>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>496</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Get system info 3</name>
    <type>SystemInfo</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>created_at</name>
        <type>system date (fixed)</type>
      </field>
      <field>
        <name>updated_at</name>
        <type>system date (fixed)</type>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>496</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Get system info 4</name>
    <type>SystemInfo</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>created_at</name>
        <type>system date (fixed)</type>
      </field>
      <field>
        <name>updated_at</name>
        <type>system date (fixed)</type>
      </field>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>496</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Select values</name>
    <type>SelectValues</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>product_id</name>
      </field>
      <field>
        <name>name</name>
      </field>
      <field>
        <name>price</name>
      </field>
      <field>
        <name>stock</name>
      </field>
      <field>
        <name>description</name>
      </field>
      <field>
        <name>created_at</name>
      </field>
      <field>
        <name>updated_at</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Select values 2</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>customer_id</name>
      </field>
      <field>
        <name>name</name>
      </field>
      <field>
        <name>gender</name>
      </field>
      <field>
        <name>address</name>
      </field>
      <field>
        <name>is_member</name>
      </field>
      <field>
        <name>created_at</name>
      </field>
      <field>
        <name>updated_at</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Select values 3</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>sales_order_id</name>
      </field>
      <field>
        <name>customer_id</name>
      </field>
      <field>
        <name>grand_total_price</name>
      </field>
      <field>
        <name>created_at</name>
      </field>
      <field>
        <name>updated_at</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Select values 4</name>
    <type>SelectValues</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>sales_order_detail_id</name>
      </field>
      <field>
        <name>sales_order_id</name>
      </field>
      <field>
        <name>product_id</name>
      </field>
      <field>
        <name>price</name>
      </field>
      <field>
        <name>quantity</name>
      </field>
      <field>
        <name>total_price</name>
      </field>
      <field>
        <name>created_at</name>
      </field>
      <field>
        <name>updated_at</name>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema>pentaho_db_market</schema>
    <table>products</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>N</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>704</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 2</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema>pentaho_db_market</schema>
    <table>customers</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>N</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>720</xloc>
      <yloc>288</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 3</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema>pentaho_db_market</schema>
    <table>sales_order</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>N</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>720</xloc>
      <yloc>464</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 4</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>pentaho_conn_mysql_db_market</connection>
    <schema>pentaho_db_market</schema>
    <table>sales_order_detail</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>N</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
    </fields>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>720</xloc>
      <yloc>544</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
    <error>
      <source_step>Select values</source_step>
      <target_step>Dummy (do nothing)</target_step>
      <is_enabled>Y</is_enabled>
      <nr_valuename/>
      <descriptions_valuename/>
      <fields_valuename/>
      <codes_valuename/>
      <max_errors/>
      <max_pct_errors/>
      <min_pct_rows/>
    </error>
    <error>
      <source_step>Table output</source_step>
      <target_step>Dummy (do nothing)</target_step>
      <is_enabled>Y</is_enabled>
      <nr_valuename/>
      <descriptions_valuename/>
      <fields_valuename/>
      <codes_valuename/>
      <max_errors/>
      <max_pct_errors/>
      <min_pct_rows/>
    </error>
    <error>
      <source_step>Table output 2</source_step>
      <target_step>Dummy (do nothing) 2</target_step>
      <is_enabled>Y</is_enabled>
      <nr_valuename/>
      <descriptions_valuename/>
      <fields_valuename/>
      <codes_valuename/>
      <max_errors/>
      <max_pct_errors/>
      <min_pct_rows/>
    </error>
    <error>
      <source_step>Table output 3</source_step>
      <target_step>Dummy (do nothing) 3</target_step>
      <is_enabled>Y</is_enabled>
      <nr_valuename/>
      <descriptions_valuename/>
      <fields_valuename/>
      <codes_valuename/>
      <max_errors/>
      <max_pct_errors/>
      <min_pct_rows/>
    </error>
    <error>
      <source_step>Table output 4</source_step>
      <target_step>Dummy (do nothing) 4</target_step>
      <is_enabled>Y</is_enabled>
      <nr_valuename/>
      <descriptions_valuename/>
      <fields_valuename/>
      <codes_valuename/>
      <max_errors/>
      <max_pct_errors/>
      <min_pct_rows/>
    </error>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes/>
</transformation>
